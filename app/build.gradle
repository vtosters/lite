import org.apache.tools.ant.taskdefs.condition.Os

import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream

plugins {
    id 'com.android.application'
    id 'net.nemerosa.versioning' version '2.15.1'
}

def smaliFolder = projectDir.toPath().resolve("../smali").normalize()
def scriptsFolder = projectDir.toPath().resolve("../scripts").normalize()

versionFile {
    file = projectDir.toPath().resolve("src/main/assets/version.properties").toFile()
}

task cleanVersionFile {
    projectDir.toPath().resolve("src/main/assets/version.properties").toFile().delete()
}

void copyToOut(InputStream source, OutputStream target) throws IOException {
    byte[] buf = new byte[8192];
    int length;
    while ((length = source.read(buf)) != -1) {
        target.write(buf, 0, length);
    }
    target.close()
    source.close()
}

task exportDex {
    doLast {
        File moduleDir = projectDir
        try {
            ZipFile file = new ZipFile(moduleDir.getAbsolutePath() + "/build/outputs/apk/release/app-release-unsigned.apk")
            var out = moduleDir.getAbsoluteFile().toPath()
            copyToOut(file.getInputStream(file.getEntry("classes.dex")), out.resolve("classes6.dex").toFile().newOutputStream())
            copyToOut(file.getInputStream(file.getEntry("classes2.dex")), out.resolve("classes7.dex").toFile().newOutputStream())
            copyToOut(file.getInputStream(file.getEntry("assets/version.properties")), out.resolve("version.properties").toFile().newOutputStream())

            var arm64 = out.resolve("lib/arm64-v8a/libnative_effects.so").toFile()
            arm64.getParentFile().mkdirs()
            copyToOut(file.getInputStream(file.getEntry("lib/arm64-v8a/libnative_effects.so")), arm64.newOutputStream())
            var arm32 = out.resolve("lib/armeabi-v7a/libnative_effects.so").toFile()
            arm32.getParentFile().mkdirs()
            copyToOut(file.getInputStream(file.getEntry("lib/armeabi-v7a/libnative_effects.so")), arm32.newOutputStream())
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

android {
    compileSdkVersion 32
    buildToolsVersion '32.0.0'

    sourceSets {
        main {
            java.srcDirs += 'build/generated/aidl_source_output_dir/release/out'
        }
    }

    defaultConfig {
        applicationId "ru.vtosters.lite.utils.lite"
        minSdk 22
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_14
        targetCompatibility JavaVersion.VERSION_14
    }
    namespace 'ru.vtosters.lite'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'net.sourceforge.streamsupport:streamsupport-minifuture:1.7.4'
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.guava:guava:23.3-android'
    implementation 'ru.vtosters.lite:native_effects:5373b23'
}

task prepareDexForMerge(type: Copy) {
    dependsOn('exportDex')
    into smaliFolder.toString()
    from(projectDir) {
        include 'classes6.dex'
        include 'classes7.dex'
    }
    from(projectDir) {
        include 'version.properties'
        into 'assets'
    }
    from("$projectDir/lib/") {
        into 'lib/'
    }
    doLast {
        new File(projectDir, "classes6.dex").delete()
        new File(projectDir, "classes7.dex").delete()
        new File(projectDir, "version.properties").delete()
        new File(projectDir, "lib").delete()
    }
}

task buildVTL(type: Exec) {
    dependsOn('prepareDexForMerge')
    workingDir(projectDir.parentFile)
    if (Os.isFamily("unix") || Os.isFamily("mac")) {
        commandLine 'bash', '-c', './scripts/build.sh'
    } else {
        commandLine 'cmd', '/C', '.\\scripts\\build.bat'
    }
}

task buildAndInstallVTL(type: Exec) {
    dependsOn('buildVTL')
    workingDir(scriptsFolder.toString())
    ignoreExitValue true
    if (Os.isFamily("unix") || Os.isFamily("mac")) {
        commandLine 'bash', '-c', 'adb install VTLite.apk'
    } else {
        commandLine 'adb', 'install', 'VTLite.apk'
    }
}

task buildAndLaunchVTL(type: Exec) {
    dependsOn('buildAndInstallVTL')
    if (Os.isFamily("unix") || Os.isFamily("mac"))
        commandLine 'bash', '-c', 'adb shell monkey -p com.vtosters.lite -c android.intent.category.LAUNCHER 1'
    else
        commandLine 'adb', 'shell', 'monkey', '-p', 'com.vtosters.lite', '-c', 'android.intent.category.LAUNCHER', '1'
}

task generateRjava(type: Exec) {
    workingDir(projectDir.parentFile)
    if (Os.isFamily("unix") || Os.isFamily("mac"))
        commandLine "bash", "-c", "./scripts/rclass_regenerator.sh"
    else
        commandLine "cmd", "/C", ".\\scripts\\rclass_regenerator.sh"
}

exportDex.dependsOn('assembleRelease')
clean.dependsOn('cleanVersionFile')
versionFile.dependsOn('cleanVersionFile')
preBuild.dependsOn('versionFile')
